// This file automatically generated by:
//   Apache Etch 1.1.0-incubating (LOCAL-0) / java 1.1.0-incubating (LOCAL-0)
//   Wed Sep 15 17:22:46 CEST 2010
// This file is automatically created for your convenience and will not be
// overwritten once it exists! Please edit this file as necessary to implement
// your service logic.

package com.yahoo.ycsb.rpc;

import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */


/**
 * Main program for HelloWorldClient. This program makes a connection to the
 * listener created by MainHelloWorldListener.
 */
public class MainHelloWorldClient implements HelloWorldHelper.HelloWorldClientFactory
{
	/**
	 * Main program for HelloWorldClient.
	 * 
	 * @param args command line arguments.
	 * @throws Exception
	 */
	public static void main( String[] args ) throws Exception
	{
		int total = 0;
        int num_clients = 1;
        int num_seconds = 2;
        ExecutorService exec = Executors.newFixedThreadPool(num_clients);
        Future<Integer>[] futures = new Future[num_clients];
        for (int i = 0; i < num_clients; i++) {
            futures[i] = exec.submit(new CTask(num_seconds));
        }
        for (int i = 0; i < num_clients; i++) {
            try {
                total += futures[i].get();
            } catch (InterruptedException e) {
                e.printStackTrace();
            } catch (ExecutionException e) {
                e.printStackTrace();
            }
        }
        System.out.println("Result: " + total);
        exec.shutdown();
	}

	public HelloWorldClient newHelloWorldClient( RemoteHelloWorldServer server )
		throws Exception
	{
		return new ImplHelloWorldClient( server );
	}
	
	private static class CTask implements Callable<Integer> {

        int num_seconds;
        
        public CTask(int x) {
            num_seconds = x;
        }
        @Override
        public Integer call() throws Exception {

        	long start = System.nanoTime();
            long total = 1000000000;
            int count = 0;
            total *= num_seconds;
            
            String uri = "tcp://10.30.7.239:4001?TcpTransport.reconnectDelay=4000";
            
            RemoteHelloWorldServer server = HelloWorldHelper.newServer( uri, null, new MainHelloWorldClient() );
            server._startAndWaitUp(4000);
            while (System.nanoTime() < total + start) {
            	server.say_hello("Hello World");
            	count++;
            }
            System.out.println(count);
            server._stopAndWaitDown(4000);

            return count;
        }
    }
}
